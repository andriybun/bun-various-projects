'''
# Name:     Python launcher for cropland validator C++ code
# Created:  10/12/2011
# Author:   Andriy Bun, andr.bun@gmail.com
# Modified: 
'''

import sys
import os
import shutil
import subprocess
import arcgisscripting
from utils import IsSameExtent

if __name__ == "__main__":
    workingDir = os.path.dirname(sys.argv[0])
    os.chdir(workingDir)
    # runFileName = workingDir + "\\croplandValidator.exe"
    runFileName = "croplandValidator.exe"
    
    areaGrid         = os.path.splitext(sys.argv[1])[0]
    statisticsLevel0 = os.path.splitext(sys.argv[2])[0]
    statisticsLevel1 = os.path.splitext(sys.argv[3])[0]
    statisticsLevel2 = os.path.splitext(sys.argv[4])[0]
    probabilityGrid  = os.path.splitext(sys.argv[5])[0]
    statLayer        = os.path.splitext(sys.argv[6])[0]
    output           = os.path.splitext(sys.argv[7])[0]
    
    statList = []
    outputList = []
    if statLayer == "#":
        # no raster specified, running for all types of statistics
        statTypes = ["min", "minavg", "avg", "maxavg", "max"]
        numStatistics = len(statTypes)
        for statType in statTypes:
            statList.append(probabilityGrid + "_" + statType)
            outputList.append(probabilityGrid + "_" + statType + "_cropland")
        gp = arcgisscripting.create()
        gp.AddWarning("Warning! The output file name will be ignored. " \
            "Autogenerated file names will be used instead.")
    else:
        # statistics raster specified, running only for it
        statList = [statLayer]
        outputList = [output]
        numStatistics = 1
    
    # Validate for equal extent
    allRasterList = [areaGrid, statisticsLevel0, statisticsLevel1, \
                     statisticsLevel2, probabilityGrid, statLayer]
    gp = arcgisscripting.create()
    if not IsSameExtent(gp, allRasterList):
        raise Exception('Error! Rasters don\'t have same extent')
    
    # Results
    resultDir        = os.path.dirname(output)
    tmpDir           = resultDir + "\\tmp_" + os.getenv('COMPUTERNAME')
    deleteTmpDir = False
    if not os.path.exists(tmpDir):
        os.mkdir(tmpDir)
        deleteTmpDir = True
    
    for idx in range(0, numStatistics):
        executeCommand = '"%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s" "%s"' % ( \
            runFileName, \
            workingDir, \
            resultDir, \
            tmpDir, \
            areaGrid, \
            statisticsLevel0, \
            statisticsLevel1, \
            statisticsLevel2, \
            probabilityGrid, \
            statList[idx], \
            outputList[idx])

        callResult = subprocess.call(executeCommand)
        
        if not(callResult == 0):
            if deleteTmpDir:
                shutil.rmtree(tmpDir)
            raise Exception('Error! Function returned error code %d!' % callResult)

    if deleteTmpDir:
        shutil.rmtree(tmpDir)
